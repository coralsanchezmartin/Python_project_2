import csv
import os


def foo():
    return os.getcwd()  # get current working directory


def remove_csv(path, ext):  # Method to remove all files in a directory, rem is the directory path.
    for f in os.listdir(path):
        extension = f.split(".")  # function that splits a string or list
        # print(extension)
        # print('looking at file ' + f)
        # print('comparing ' + extension[-1] + ' con ' + 'csv')  # comparing the last value of the above list [-1] with
        # the extension we are interested in this case csv.
        if extension[-1] == ext:
            # print('inside')  # printing to see whether this comparison works or not, if the extension is different
            # from csv then it will not appear inside.
            # print(type(extension))  # it prints the type of variable.
            os.remove(os.path.join(path, f))
        # print()


def list_of_colons(list_post, column):
    list_colons = []
    count = 0
    for linea_i in list_post:
        if linea_i[column].__contains__(","):
            list_colons.append(linea_i)
            count += 1
            # print(list_colons)

    return list_colons, count


def represents_int(s):  # Method that checks if a string is an integer
    try:
        int(s)
        return True
    except ValueError:
        return False


def represents_float(s):  # Method that checks if a string is a float
    try:
        float(s)
        return True
    except ValueError:
        return False


def positives(list_post, upper_post, column):
    """
    :param column: it adds the column number where the number that we are looking for is at.
    :param list_post: csv_new_list, it opens the new csv with the replaced delimiter.
    :param upper_post: upper constant 1000.
    :return: t returns the new list generated by adding the values that meet the if requirements.
    """
    list_post_complete = []
    count = 0  # The list starts at 0
    for linea_i in list_post:
        # if linea_i[0] == "Sebastian Graham":
        # print(linea_i[1])
        if represents_int(linea_i[column]) or represents_float(linea_i[column]):  # call the method to check whether
            # the value in the second column (linea_i[1]) is a float or an integer
            # if linea_i[0] == "Sebastian Graham":
            # print("inside")
            if 0 <= float(linea_i[column]) < upper_post:
                list_post_complete.append(linea_i)
                count += 1  # It adds 1 with each new element added to the list.
                # length = list_post_complete.__len__()

                # print('Number of elements in list : ', length)
                # print(type(length))
                # count_positives = sum(list_post_complete[0])
                # print(count_positives)
    return list_post_complete, count  # return the list


def negatives(list_post, lower_post, column):
    """
    :param column: it adds the column number where the number that we are looking for is at.
    :param list_post: csv_new_list, it opens the new csv with the replaced delimiter.
    :param lower_post: lower constant -1000.
    :return:it returns the new list generated by adding the values that meet the if requirements.
    """
    list_neg_complete = []
    count = 0
    for linea_i in list_post:
        if represents_int(linea_i[column]) or represents_float(linea_i[column]):
            if 0 > float(linea_i[column]) > lower_post:
                list_neg_complete.append(linea_i)
                count += 1
                # count_negatives = sum(1 for line in list_neg_complete)
                # print(count_negatives)

    return list_neg_complete, count


def outliers_positives(list_post, upper_post, column):
    list_outpost_complete = []
    count = 0
    for linea_i in list_post:
        if represents_int(linea_i[column]) or represents_float(linea_i[column]):
            if float(linea_i[column]) > upper_post:
                list_outpost_complete.append(linea_i)
                count += 1
                # count_outliers_positives = sum(1 for line in list_outpost_complete)
                # print(count_outliers_positives)

    return list_outpost_complete, count


def outliers_negatives(list_post, lower_post, column):
    list_out_negative_complete = []
    count = 0
    for linea_i in list_post:
        if represents_int(linea_i[column]) or represents_float(linea_i[column]):
            if float(linea_i[column]) < lower_post:
                list_out_negative_complete.append(linea_i)
                count += 1

    return list_out_negative_complete, count


def null(list_null, equal_null, column):
    """

    :param column: it adds the column number where the number that we are looking for is at.
    :param list_null: csvlist, it opens the original csv with the colon delimiter.
    :param equal_null: NULL_VALUES, it pass the string 'Null'
    :return: it returns the new list generated by adding the values that meet the if requirements, in this case the
    values that have the string 'Null'.
    """
    list_null_complete = []
    count = 0
    for linea_i in list_null:
        if linea_i[column] == equal_null:
            list_null_complete.append(linea_i)
            count += 1

    return list_null_complete, count


def empty(list_post, column):
    list_empty = []
    count = 0
    for linea_i in list_post:
        if len(linea_i[column]) == 0:
            list_empty.append(linea_i)
            count += 1

    return list_empty, count


def replace(list_replace, column, search_v, replace_v):  # new method to change commas for dots in the csv.
    """
    :param replace_v: it replaces the parameter it was searching with this one.
    :param search_v: searches the csv looking for this parameter.
    :param column: it adds the column number where the number that we are looking for is at.
    :param list_replace: csvlist, from the original csv with the colon delimiter.
    :return: it returns the new list generated by adding the values once the colons are replace with dots.
    """
    list_replace_complete = []
    count = 0
    for linea_i in list_replace:
        place = linea_i[column].replace(search_v, replace_v)  # function .replace to replace something in the csv.
        # print(place)
        linea_i[column] = place
        list_replace_complete.append(linea_i)
        count += 1
        # print(list_replace_complete)

    return list_replace_complete, count


def open_csv(new_file, delimiter_param):
    with open(new_file) as data:
        entry = csv.reader(data, delimiter=delimiter_param)
        list_i = list(entry)
    return list_i


def create_csv(create_new_csv, csvlist, delimiter_param, first_column, second_column):
    output_f = open(create_new_csv, "w+")
    csv_str = ""

    for linea_i in csvlist:
        csv_str += str(linea_i[first_column]) + delimiter_param + str(
            linea_i[second_column]) + '\n'

    output_f.write(csv_str)
    output_f.close()
